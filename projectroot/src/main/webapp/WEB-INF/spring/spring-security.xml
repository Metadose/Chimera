<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
   		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<!-- This is where we configure Spring-Security  -->
	<security:http auto-config="false" use-expressions="true" access-denied-page="/pmsys/auth/denied"
			entry-point-ref="authenticationEntryPoint" >
	
		<security:intercept-url pattern="/pmsys/auth/login" access="permitAll"/>
		<security:intercept-url pattern="/pmsys/main/admin" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/pmsys/main/common" access="hasRole('ROLE_USER')"/>
			
		<security:logout 
				invalidate-session="true" 
				logout-success-url="/pmsys/auth/login" 
				logout-url="/pmsys/auth/logout"/>
	
		<security:custom-filter ref="blacklistFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
		<security:custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER"/>
	</security:http>
	
 	<!--  Custom filter to deny unwanted users even though registered -->
 	<bean id="blacklistFilter" class="com.cebedo.pmsys.login.filter.BlacklistFilter" />
 	
 	<!-- Custom filter for username and password. The real customization is done in the customAthenticationManager -->
 	<bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
  		p:authenticationManager-ref="customAuthenticationManager"
  		p:authenticationFailureHandler-ref="customAuthenticationFailureHandler"
  		p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler" />
  		
	<!-- Custom authentication manager. In order to authenticate, username and password must not be the same -->
	<bean id="customAuthenticationManager" class="com.cebedo.pmsys.login.manager.CustomAuthenticationManager" />
 	
 	<!-- We just actually need to set the default failure url here -->
 	<bean id="customAuthenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
 		p:defaultFailureUrl="/pmsys/auth/login?error=true" />
 		
 	 <!-- We just actually need to set the default target url here -->
 	<bean id="customAuthenticationSuccessHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler"
 		p:defaultTargetUrl="/pmsys/main/common" />
 	
 	<!-- The AuthenticationEntryPoint is responsible for redirecting the user to a particular page, like a login page,
 			whenever the server sends back a response requiring authentication -->
 	<!-- See Spring-Security Reference 5.4.1 for more info -->
 	<bean id="authenticationEntryPoint"  class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"
	 	p:loginFormUrl="/pmsys/auth/login"/>

	<!-- The tag below has no use but Spring Security needs it to autowire the parent property of 
			org.springframework.security.authentication.ProviderManager. Otherwise we get an error 
			A probable bug. This is still under investigation-->
	<security:authentication-manager/>
	
	
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <beans:property name="url"
            value="jdbc:mysql://localhost:3306/test" />
        <beans:property name="username" value="root" />
        <beans:property name="password" value="" />
    </beans:bean>
	
	<!-- Hibernate 4 SessionFactory Bean definition -->
    <beans:bean id="hibernate4AnnotatedSessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource" />
        <beans:property name="annotatedClasses">
            <beans:list>
                <beans:value>com.cebedo.pmsys.systemuser.model.SystemUser</beans:value>
            </beans:list>
        </beans:property>
        <beans:property name="hibernateProperties">
            <beans:props>
                <beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect
                </beans:prop>
                <beans:prop key="hibernate.show_sql">true</beans:prop>
            </beans:props>
        </beans:property>
    </beans:bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
    <beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </beans:bean>
</beans>
