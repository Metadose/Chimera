<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:tx="http://www.springframework.org/schema/tx"	
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
   		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<security:global-method-security secured-annotations="enabled"/>
	
	<!-- This is where we configure Spring-Security  -->
	<security:http auto-config="false" use-expressions="true" access-denied-page="/auth/denied"
			entry-point-ref="authenticationEntryPoint" >
			
		<security:csrf/>
				
		<!-- Permit everyone to see the login page and the js css resources -->
		<security:intercept-url pattern="/auth/**" access="permitAll"/>
		
		<!-- Only an authenticated user can view the dashboard and images -->
		<security:intercept-url pattern="/dashboard/**" access="isAuthenticated()"/>
		<security:intercept-url pattern="/image/display/**" access="isAuthenticated()"/>
		
		<!-- These are just general access security, a finer security level resides in the Controller and JSP -->
		<security:intercept-url pattern="/company/**" access="hasRole('ACCESS_COMPANY')"/>
		<security:intercept-url pattern="/field/**" access="hasRole('ACCESS_FIELD')"/>
		<security:intercept-url pattern="/photo/**" access="hasRole('ACCESS_PHOTO')"/>
		<security:intercept-url pattern="/project/**" access="hasRole('ACCESS_PROJECT')"/>
		<security:intercept-url pattern="/projectfile/**" access="hasRole('ACCESS_PROJECTFILE')"/>
		<security:intercept-url pattern="/staff/**" access="hasRole('ACCESS_STAFF')"/>
		<security:intercept-url pattern="/task/**" access="hasRole('ACCESS_TASK')"/>
		<security:intercept-url pattern="/team/**" access="hasRole('ACCESS_TEAM')"/>
		<security:intercept-url pattern="/systemuser/**" access="hasRole('ACCESS_SYSTEMUSER')"/>
		<security:intercept-url pattern="/config/**" access="hasRole('ACCESS_CONFIG')"/>
		
		<security:logout 
				invalidate-session="true" 
				logout-success-url="/auth/login" 
				logout-url="/auth/logout"/>
	
		<security:custom-filter ref="blacklistFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
		<security:custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER"/>
	</security:http>
	
 	<!--  Custom filter to deny unwanted users even though registered -->
 	<bean id="blacklistFilter" class="com.cebedo.pmsys.login.filter.BlacklistFilter" />
 	
 	<!-- Custom filter for username and password. The real customization is done in the customAthenticationManager -->
 	<bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
  		p:authenticationManager-ref="customAuthenticationManager"
  		p:authenticationFailureHandler-ref="customAuthenticationFailureHandler"
  		p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler" />
  		
	<!-- Custom authentication manager. In order to authenticate, username and password must not be the same -->
	<bean id="customAuthenticationManager" class="com.cebedo.pmsys.login.manager.CustomAuthenticationManager" />
 	
 	<!-- We just actually need to set the default failure url here -->
 	<bean id="customAuthenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
 		p:defaultFailureUrl="/auth/login?error=true" />
 		
 	 <!-- We just actually need to set the default target url here -->
 	<bean id="customAuthenticationSuccessHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler"
 		p:defaultTargetUrl="/dashboard/" />
 	
 	<!-- The AuthenticationEntryPoint is responsible for redirecting the user to a particular page, like a login page,
 			whenever the server sends back a response requiring authentication -->
 	<!-- See Spring-Security Reference 5.4.1 for more info -->
 	<bean id="authenticationEntryPoint"  class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"
	 	p:loginFormUrl="/auth/login"/>

	<!-- The tag below has no use but Spring Security needs it to autowire the parent property of 
			org.springframework.security.authentication.ProviderManager. Otherwise we get an error 
			A probable bug. This is still under investigation-->
	<security:authentication-manager/>
	
	
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <beans:property name="url"
            value="jdbc:mysql://localhost:3306/test" />
        <beans:property name="username" value="root" />
        <beans:property name="password" value="" />
    </beans:bean>
	
	<!-- Hibernate 4 SessionFactory Bean definition -->
    <beans:bean id="hibernate4AnnotatedSessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource" />
        <beans:property name="annotatedClasses">
            <beans:list>
                <beans:value>com.cebedo.pmsys.project.model.Project</beans:value>
                <beans:value>com.cebedo.pmsys.field.model.Field</beans:value>
                <beans:value>com.cebedo.pmsys.field.model.FieldAssignment</beans:value>
                <beans:value>com.cebedo.pmsys.staff.model.Staff</beans:value>
                <beans:value>com.cebedo.pmsys.staff.model.ManagerAssignment</beans:value>
                <beans:value>com.cebedo.pmsys.staff.model.StaffTeamAssignment</beans:value>
                <beans:value>com.cebedo.pmsys.staff.model.StaffFieldAssignment</beans:value>
                <beans:value>com.cebedo.pmsys.team.model.Team</beans:value>
                <beans:value>com.cebedo.pmsys.team.model.TeamAssignment</beans:value>
                <beans:value>com.cebedo.pmsys.task.model.Task</beans:value>
                <beans:value>com.cebedo.pmsys.projectfile.model.ProjectFile</beans:value>
                <beans:value>com.cebedo.pmsys.systemconfiguration.model.SystemConfiguration</beans:value>
                <beans:value>com.cebedo.pmsys.photo.model.Photo</beans:value>
                <beans:value>com.cebedo.pmsys.task.model.TaskTeamAssignment</beans:value>
                <beans:value>com.cebedo.pmsys.task.model.TaskStaffAssignment</beans:value>
                <beans:value>com.cebedo.pmsys.task.model.TaskFieldAssignment</beans:value>
                <beans:value>com.cebedo.pmsys.systemuser.model.SystemUser</beans:value>
                <beans:value>com.cebedo.pmsys.company.model.Company</beans:value>
                <beans:value>com.cebedo.pmsys.security.securityaccess.model.SecurityAccess</beans:value>
                <beans:value>com.cebedo.pmsys.security.securityrole.model.SecurityRole</beans:value>
<!--                 <beans:value>com.cebedo.pmsys.subcontractor.model.Subcontractor</beans:value> -->
<!--                 <beans:value>com.cebedo.pmsys.cashflow.expense.model.Expense</beans:value> -->
            </beans:list>
        </beans:property>
        <beans:property name="hibernateProperties">
            <beans:props>
                <beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect
                </beans:prop>
                <beans:prop key="hibernate.show_sql">true</beans:prop>
            </beans:props>
        </beans:property>
    </beans:bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
    <beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </beans:bean>
    
    <beans:bean id="systemUserDAO" class="com.cebedo.pmsys.systemuser.dao.SystemUserDAOImpl">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </beans:bean>
    <beans:bean id="systemUserService" class="com.cebedo.pmsys.systemuser.service.SystemUserServiceImpl">
        <beans:property name="systemUserDAO" ref="systemUserDAO"></beans:property>
    </beans:bean>
    
</beans>
